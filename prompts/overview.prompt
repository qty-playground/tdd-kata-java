# TDD Labs - Development Prompts Overview (Java SE)

## â˜• Java SE Project Development Workflow Guide

This project uses a series of specialized prompts to guide different phases and tasks of Java SE development. Each prompt has specific purposes and usage timing.

## Prompts Architecture

```
prompts/
â”œâ”€â”€ overview.prompt         # ðŸ“‹ This file - Overall usage guide
â”œâ”€â”€ coding-style.prompt     # ðŸŽ¨ Java SE coding style standards
â””â”€â”€ tdd/                   # ðŸ”„ TDD development workflow
    â”œâ”€â”€ tdd-session.prompt # ðŸŽ¯ TDD main controller (Java SE)
    â”œâ”€â”€ red-phase.prompt   # ðŸ”´ Red Phase specific (JUnit 5)
    â”œâ”€â”€ green-phase.prompt # ðŸŸ¢ Green Phase specific (Java)
    â””â”€â”€ refactor-phase.prompt # ðŸ”§ Refactor Phase specific (Java)
```

## Usage Workflow

### 1. Java Project Setup
```bash
# Maven project initialization
mvn archetype:generate -DgroupId=com.example \
  -DartifactId=tdd-practice -DarchetypeArtifactId=maven-archetype-quickstart

# Or Gradle project initialization  
gradle init --type java-application

# Confirm test environment works (prefer wrapper)
./mvnw test        # If mvnw exists
./gradlew test     # If gradlew exists
# Or fallback to:
mvn test
gradle test
```

### 2. Pre-development Setup
Read core guides:
- `@prompts/coding-style.prompt` - Understand Java SE coding style requirements
- Confirm project uses JUnit 5 + Maven/Gradle

### 3. TDD Development Workflow

#### 3.1 Start New TDD Session
```
Use: @prompts/tdd/tdd-session.prompt
Purpose: Determine target classes, test files, judge which phase should be current
```

#### 3.2 Red Phase - Write Failing JUnit Tests
```
Use: @prompts/tdd/red-phase.prompt
Purpose: Write one failing JUnit test for specific business rule
Key points:
- Only modify files in src/test/java/ directory
- One test per cycle, don't be greedy
- Confirm test fails for correct reason
- Execute: ./mvnw test or ./gradlew test (prefer wrapper)
```

#### 3.3 Green Phase - Minimal Java Implementation  
```
Use: @prompts/tdd/green-phase.prompt
Purpose: Write minimal Java code to make tests pass
Key points:
- Only modify files in src/main/java/ directory
- Hardcoded values are completely acceptable
- Focus on making tests pass, not code elegance
- Execute: ./mvnw test or ./gradlew test (prefer wrapper)
```

#### 3.4 Refactor Phase - Improve Code Quality
```
Use: @prompts/tdd/refactor-phase.prompt
Purpose: Mandatory code review + Optional code improvements
Key points:
- This phase cannot be skipped, even if no refactoring is done
- Must perform code review and record decision
- Keep public interface unchanged
- Execute tests frequently: ./mvnw test or ./gradlew test (prefer wrapper)
```

## Development Principles

### Core TDD Rules
- Follow Red â†’ Green â†’ Refactor sequence strictly
- Execute test commands after each phase completion (prefer `./mvnw test` or `./gradlew test`)
- Safely refactor Java code under JUnit test protection

### File Modification Restrictions
- **Red Phase**: Only modify `src/test/java/` directory
- **Green Phase**: Only modify `src/main/java/` directory  
- **Refactor Phase**: Only modify `src/main/java/` directory (keep public interfaces unchanged)

### Progress Reporting (NEW REQUIREMENT)
Each phase completion must include commit with structured report answering:
1. Current phase and what was done?
2. Discoveries and problems encountered?
3. Next phase and planned actions?

## Java SE Specific Guidelines

### Test Framework
- **Primary choice**: JUnit 5 (jupiter)
- **Test naming**: `ClassNameTest.java` or `ClassNameTests.java`
- **Method naming**: `should_ExpectedBehavior_When_Condition()`

### Build Tools
- **Maven**: Use `./mvnw` wrapper if exists, fallback to `mvn`
- **Gradle**: Use `./gradlew` wrapper if exists, fallback to `gradle`

### Project Structure
```
project-root/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ main/java/com/example/
â”‚   â””â”€â”€ test/java/com/example/
â”œâ”€â”€ pom.xml (Maven) or build.gradle (Gradle)
â””â”€â”€ README.md
```

### Java Version
- **Minimum**: Java 17+
- **Recommended**: Java 21 LTS

## Common Commands

### Test Execution (Always prefer wrapper)
```bash
# Maven
./mvnw test                        # Run all tests
./mvnw test -Dtest=ClassNameTest    # Run specific test class
./mvnw clean test                  # Clean and test

# Gradle  
./gradlew test                     # Run all tests
./gradlew test --tests ClassNameTest # Run specific test class
./gradlew clean test               # Clean and test
```

### Development Workflow Summary
1. **Requirements Analysis** â†’ Plan TDD cycles
2. **Red Phase** â†’ Write failing test + commit report
3. **Green Phase** â†’ Minimal implementation + commit report  
4. **Refactor Phase** â†’ Mandatory code review + optional improvements + commit report
5. **Cycle Complete** â†’ Check for next test case or wait for new requirements

## Best Practices

### Code Quality
- Keep methods small and focused
- Use meaningful names for classes, methods, and variables
- Follow single responsibility principle
- Write self-documenting code

### Testing
- One assertion per test when possible
- Use AAA pattern (Arrange, Act, Assert)
- Keep tests simple and readable
- Test behavior, not implementation

### Git Workflow
- Frequent commits with descriptive messages
- Each phase completion must have progress report commit
- Use conventional commit messages (red:, green:, refactor:)

## Troubleshooting

### Common Issues
- **Tests not discovered**: Check file naming patterns (`*Test.java`)
- **Compilation errors**: Ensure proper package structure
- **Maven/Gradle issues**: Use wrapper commands when available
- **Phase confusion**: Always use tdd-session.prompt to determine current phase

### Getting Help
- Use `@prompts/tdd/tdd-session.prompt` for phase determination
- Each phase prompt contains specific completion criteria
- All prompts include command examples and checklists