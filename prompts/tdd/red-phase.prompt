# RED PHASE - Write Failing JUnit Tests

## 🔴 RED PHASE ACTIVE (Java SE + Maven)

**Goal: Write one failing JUnit test for new business rule**

* When test cases have multiple items, break them into multiple cycles and handle one at a time. Don't be greedy, don't rush.

## 🎯 File Rules
**✅ ONLY modify:** `src/test/java/` test files  
**❌ NEVER touch:** `src/main/java/` implementation files

## Red Phase Objectives - CRITICAL TDD Purity Rules

### 🎯 1. ONE Test, ONE Rule - Absolute Principle
**NEVER write multiple tests in one Red Phase**

❌ **WRONG - Multiple tests:**
```java
@Test
void should_handle_multiples_of_three() {
    assertEquals("Foo", fooBarBar(3));
    assertEquals("Foo", fooBarBar(6));  // This is a second test case!
    assertEquals("Foo", fooBarBar(9));  // This is a third test case!
}
```

✅ **CORRECT - Single test case:**
```java  
@Test
void should_return_foo_when_input_is_3() {
    // Only test input=3 case, don't peek at future requirements
    assertEquals("Foo", fooBarBar(3));
}
```

### 🚫 2. NO Future Peeking - Present Mindset
- **Only consider this one specific requirement**
- **Don't predict or prepare for future test cases**
- **Even if requirement description contains multiple examples, only pick one to test**

❌ **WRONG - Peeking at future:**
```java
// Requirement: "Numbers 3, 6, 9 should all return Foo"
@Test
void test_multiples_of_three() {
    assertEquals("Foo", fooBarBar(3));
    assertEquals("Foo", fooBarBar(6));  // Peeking at future!
    assertEquals("Foo", fooBarBar(9));  // Peeking at future!
}
```

✅ **CORRECT - Present focus:**
```java
// Requirement: "Numbers 3, 6, 9 should all return Foo" 
// But I only test the first example
@Test
void should_return_foo_when_input_is_3() {
    assertEquals("Foo", fooBarBar(3));
}
```

### 📝 3. Minimal Test Structure (JUnit 5)
```java
@Test
void should_[specific_behavior]_when_[specific_condition]() {
    // Specifically describe what this one test verifies
    
    // Arrange - Prepare test data
    TargetClass target = new TargetClass();
    InputType input = specificInput;
    ExpectedType expected = expectedOutput;
    
    // Act - Execute method under test
    ActualType actual = target.targetMethod(input);
    
    // Assert - Verify result
    assertEquals(expected, actual);
}
```

### 4. Expected Failure Types (Java + JUnit 5)
```java
// Class doesn't exist yet - Compilation error
import com.example.services.NewService; // Class not found

// Method not implemented yet
@Test
void should_throw_exception_when_method_not_implemented() {
    TargetService service = new TargetService();
    assertThrows(UnsupportedOperationException.class, () -> {
        service.methodName();
    });
}

// Validation rule not implemented
@Test
void should_throw_validation_error_for_invalid_input() {
    ValidationService service = new ValidationService();
    assertThrows(ValidationException.class, () -> {
        service.validate("invalid_input");
    });
}

// Method returns null or wrong value
@Test
void should_return_correct_value() {
    CalculationService service = new CalculationService();
    // Expected: null or wrong value initially
    String result = service.process("input");
    assertEquals("expected_result", result); // Will fail
}

// Exception type mismatch
@Test
void should_handle_edge_case() {
    EdgeCaseService service = new EdgeCaseService();
    // Expected: different exception or no exception
    assertThrows(SpecificException.class, () -> {
        service.handleEdgeCase("edge_input");
    });
}
```

## ✅ Completion Criteria
1. **One failing test written** - Tests single business rule
2. **Test fails correctly** - Right failure reason 
3. **Only test files modified** - No implementation code touched

### 📝 MANDATORY COMMIT:
**Must commit with progress report answering:**
1. Current phase and what was done?
2. Discoveries and problems encountered?
3. Next phase and planned actions?

### 🔧 Execute Tests:
`./mvnw test` or `./gradlew test` (prefer wrapper if exists), fallback to `mvn test` or `gradle test`

## → Next: GREEN PHASE
Write minimal implementation to make the test pass

## Test Discovery Guidelines

If tests not discovered, check:
1. File name follows `*Test.java` pattern
2. Class in correct package under `src/test/java/`
3. Methods have `@Test` annotation
4. No compilation errors

## Common Red Phase Mistakes to Avoid

❌ **Don't**:
- Modify src/main/java/ implementation code
- Write multiple rules in one test
- Let test accidentally pass
- Over-complicated test setup
- Forget to confirm test is discovered by Maven/Gradle

✅ **Do**:
- Focus on writing one failing JUnit test
- Clearly express business rule
- Confirm failure reason is correct (compilation error, assertion failure, exception)
- Keep test simple and clear
- First confirm test discovery works (mvn test or gradle test)