# Java SE Coding Style Guide

## üéØ Our Distinctive Style Rules

### 1. Screaming Architecture Names
**Names must reveal business intent and purpose - not just technical implementation**

```java
// ‚úÖ GOOD - Business intent is clear
public class UserRegistrationService { }
public class EmailValidationService { }
public class PaymentProcessingService { }

public RegisteredUser registerNewUser(String email, String password) {
    EmailValidator userEmailValidator = new EmailValidator();
    PasswordHasher passwordHasher = new PasswordHasher();
    UserRepository userRepository = new UserRepository();
    
    ValidatedEmail validatedEmail = userEmailValidator.validate(email);
    HashedPassword hashedPassword = passwordHasher.hash(password);
    
    return userRepository.saveNewUser(validatedEmail, hashedPassword);
}

// ‚ùå BAD - Technical naming reveals nothing about business purpose
public User process(String data, String key) {
    Validator v = new Validator();
    Hasher h = new Hasher();
    Repository r = new Repository();
}
```

### 2. Strong Typing & Domain Objects
**Avoid primitive obsession - create explicit domain types**

```java
// ‚úÖ GOOD - Strong typing with domain objects
public class UserRegistrationRequest {
    private final String emailAddress;
    private final String rawPassword;
    private final String fullName;
    
    // Constructor + getters...
}

public class EmailValidationResult {
    private final boolean isValid;
    private final String errorMessage;
    
    public boolean isValid() { return isValid; }
    public String getErrorMessage() { return errorMessage; }
}

// ‚ùå BAD - Primitive obsession
public Map<String, Object> registerUser(Map<String, String> userData) {
    // What's in these maps? Unclear contract
}
```

### 3. Business-Focused Package Structure
**Packages should express business domains, not technical layers**

```java
// ‚úÖ GOOD - Business-focused
package com.example.authentication;
package com.example.userregistration;  
package com.example.emailvalidation;
package com.example.paymentprocessing;

// ‚ùå BAD - Technical-only naming
package com.example.utils;
package com.example.helpers;
package com.example.managers;
```

## üìã Essential Principles

1. **Screaming Architecture** - Names reveal business intent
2. **Strong Typing** - Use domain objects, avoid primitive obsession  
3. **Business-Focused Packages** - Organize by business domain, not technical layers